# -*- coding: utf-8 -*-
import time

# Form implementation generated from reading ui file 'ID.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QWidget
from PyQt5 import QtCore, QtGui, QtWidgets
import serial
import threading
from first_window import get_employee_data
from grvispp import Ui_MainWindow
import requests
from PyQt5.QtCore import QObject, pyqtSignal


from globalval import global_health_check
def get_employee_data(employee_id):
    # Construct the URL with the employee_id
    url = f'https://venus.hello-olzhas.kz/api/v1/employees/{employee_id}/'

    # Headers as per the provided curl command
    headers = {
        'accept': 'application/json',
        'X-CSRFToken': 'GxFcOFW1RanWza01020vBKDVqmjucQif2nHJcuEHnWGhvZ5wg1F6WzkP4jyp4TJv'
    }

    # Make the GET request
    response = requests.get(url, headers=headers)

    # Check if the request was successful
    if response.status_code == 200:
        # Return the JSON response if the request was successful
        return response.json()
    else:
        # Return an error message if something went wrong
        return {'error': f'Request failed with status code {response.status_code}'}
class SignalHelper(QObject):
    dataReceived = pyqtSignal(dict)
    closeMainWindow = pyqtSignal()

class ddUi_MainWindow(object):

    def setupUi(self, MainWindow):
        self.mainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1440, 1024)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(228, 231, 237))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(228, 231, 237))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(228, 231, 237))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(228, 231, 237))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)

        self.label.setGeometry(QtCore.QRect(200, 100, 1500, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(122, 107, 223))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(122, 107, 223))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(850, 400, 240, 320))
        self.frame.setStyleSheet("QWidget {\n"
"    border-radius: 15px; /* Adjust for rounded corners */\n"
"    background-color: black; /* Background color */\n"
"    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15); /* Drop shadow effect */\n"
"    padding: 20px; /* Space inside the frame */\n"
"}\n"
"")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(20, 20, 200, 280))
        self.frame_2.setStyleSheet("QWidget {\n"
"    border-radius: 15px; /* Adjust for rounded corners */\n"
"    background-color: rgb(106, 255, 60); /* Background color */\n"
"    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.15); /* Drop shadow effect */\n"
"    padding: 20px; /* Space inside the frame */\n"
"}\n"
"")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.initSerialPort()
        self.grvisWindow = None
        self.signalHelper = SignalHelper()
        self.signalHelper.dataReceived.connect(self.openGrvisWindowWithData)
        self.signalHelper.closeMainWindow.connect(self.closeMainWindow)

    def initSerialPort(self):
        # Initialize serial port in a new thread to avoid blocking the GUI
        self.serialThread = threading.Thread(target=self.readSerialPort)
        self.serialThread.daemon = True
        self.serialThread.start()

    def closeMainWindow(self):
        self.mainWindow.close()

    def readSerialPort(self):
        try:
            with serial.Serial('COM4', 9600, timeout=1) as ser:
                print("com4 connected")
                time.sleep(1)
                while True:
                    command = 'DETECT'
                    ser.write(f"{command}\r\n".encode())
                    line = ser.readline().decode('utf-8').strip()
                    if line and line.startswith("ID:"):
                        id_number = line.split(':')[1]
                        print(id_number)
                        realID= global_health_check.getIDByKey(id_number)
                        print(realID)
                        if realID:
                            employee_data = get_employee_data(realID)
                            # Here, safely emit the signal with the employee data
                            self.signalHelper.dataReceived.emit(employee_data)
                            break
        except serial.SerialException as e:
            print(f"Error opening serial port: {e}")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Положите палец на датчик отпечатка"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)

    def openGrvisWindowWithData(self, data):
        print("Opening grvis window with data:", data)
        try:
            if self.grvisWindow is None or not self.grvisWindow.isVisible():
                print("Creating new grvis window...")
                self.grvisWindow = QMainWindow()
                self.ui = Ui_MainWindow()
                self.ui.setupUi(self.grvisWindow)
            else:
                print("Using existing grvis window...")
                self.grvisWindow.raise_()
                self.grvisWindow.activateWindow()

            print("Updating UI with data...")
            self.ui.updateUIWithAPIData(data)  # Ensure this method is correctly handling the data
            self.grvisWindow.showFullScreen()
            self.signalHelper.closeMainWindow.emit()





        except Exception as e:
            print("Error opening grvis window:", e)


import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from globalval import global_health_check

if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = ddUi_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

